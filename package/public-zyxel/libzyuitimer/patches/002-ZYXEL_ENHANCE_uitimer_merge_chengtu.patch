Index: libzyuitimer-1.0/uitimer.c
===================================================================
--- libzyuitimer-1.0.orig/uitimer.c	2020-06-16 15:54:54.460826925 +0800
+++ libzyuitimer-1.0/uitimer.c	2020-06-16 16:02:27.993867468 +0800
@@ -35,11 +35,14 @@
 #include <signal.h>
 #include "timer_list.h"
 #include "uitimer.h"
+#include <sys/prctl.h> //Michael.20130508.001: Add
+#include <errno.h> // for ESRCH
 
 #include "zos_api.h"
 #include "zlog_api.h"
 
 #define UPTIME_FILE "/proc/uptime"
+#define UI_TIMER_TASK_NAME "libzyuitimer"
 
 #ifndef BOOL
 typedef unsigned char BOOL;
@@ -59,17 +62,31 @@
 pthread_mutex_t saveConfigTimerMutex;
 struct timer_list time_list;
 struct timer_list periodic_time_list;
+struct timer_list temp_list;
 BOOL timer_thread_running = FALSE;
 
 
 void UITimer_Init(void){
+#if 1/*ZyXEL, rt_priority_Eason*/
+	pthread_attr_t attributes;
+	struct sched_param schedparams;
+#endif
+
 	if(!timer_thread_running){
 		timer_list_init(&time_list);
 		timer_list_init(&periodic_time_list);
 		pthread_mutex_init(&timerMutex, NULL);
 		pthread_mutex_init(&saveConfigTimerMutex, NULL);
 		timer_thread_running = TRUE;
+#if 1 /*ZyXEL, rt_priority_Eason*/
+		pthread_attr_init( &attributes );
+		pthread_attr_setschedpolicy( &attributes, SCHED_RR );
+		schedparams.sched_priority = 75;
+		pthread_attr_setschedparam( &attributes, &schedparams );
+		pthread_create( (pthread_t*)&timer_thread, &attributes, (void*)UITimerProc, 0 );
+#else
 		pthread_create(&timer_thread, NULL, UITimerProc, 0);
+#endif
 	}
 	return;
 }
@@ -79,7 +96,12 @@
 		UIDelAllTimer();
 		timer_thread_running = FALSE;
 		pthread_mutex_unlock(&timerMutex);
-		pthread_kill(timer_thread, 0);
+		if (pthread_kill(timer_thread, 0) == ESRCH)
+		{
+			printf("the specified thread did not exists or already quit\n");
+			exit(EXIT_FAILURE);
+		}
+		//pthread_cancel(timer_thread);
 		pthread_join(timer_thread, NULL);
 		timer_thread = 0;
 	}
@@ -88,12 +110,26 @@
 
 void *UITimerProc(void *arg)
 {
+
 	struct timeval_t        timer_val;
 	CMTimer_t               *uitimer=NULL;
 	timer_list_iterator_t   iter;
 
+	prctl(PR_SET_NAME, UI_TIMER_TASK_NAME, 0, 0, 0);
 	ZLOG_INFO("thread starts");
+	//printf("%s(): The UI Timer System (thread task: libzyuitimer, pid=%d) is running...\n", __FUNCTION__, getpid());
 
+	// for pthread_cancel attribute to terminal the thread
+	//if (pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, NULL) != 0) {
+	//	printf("Thread pthread_setcancelstate failed");
+	//	exit(EXIT_FAILURE);
+	//}
+	//if (pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, NULL) != 0) {
+	//	printf("Thread pthread_setcanceltype failed");
+	//	exit(EXIT_FAILURE);
+	//}
+
+#if 0
 	while (timer_thread_running)
 	{
 		//gettimeofday(&timer_val, NULL);
@@ -103,10 +139,10 @@
 		uitimer =(CMTimer_t*) timer_list_get_first( &time_list, &iter );
 		pthread_mutex_unlock(&timerMutex);
 		while(uitimer && timer_thread_running){
-			if( 	(uitimer->timeout.tv_sec>timer_val.tv_sec) ||
-			((uitimer->timeout.tv_sec == timer_val.tv_sec) &&(uitimer->timeout.tv_usec > timer_val.tv_usec))){
+			if( (uitimer->timeout.tv_sec>timer_val.tv_sec) ||
+				((uitimer->timeout.tv_sec == timer_val.tv_sec) && (uitimer->timeout.tv_usec > timer_val.tv_usec))){
 				pthread_mutex_lock(&timerMutex);
-				uitimer =(CMTimer_t*) timer_list_get_next( &iter );
+				uitimer = (CMTimer_t*) timer_list_get_next( &iter );
 				pthread_mutex_unlock(&timerMutex);
 				continue;
 			}
@@ -114,7 +150,7 @@
 			timer_list_iterator_remove(&iter);
 			pthread_mutex_unlock(&timerMutex);
 			if(uitimer->fn) {
-				uitimer->fn(uitimer->data);
+				uitimer->fn(uitimer->TimerID, uitimer->data);
 			}
 			ZOS_FREE(uitimer);
 			uitimer =NULL;
@@ -137,7 +173,7 @@
 				continue;
 			}
 			if(uitimer->fn) {
-				uitimer->fn(uitimer->data);
+				uitimer->fn(uitimer->TimerID, uitimer->data);
 			}
 			memset(&(uitimer->timeout), 0, sizeof(struct timeval));
 			memcpy(&(uitimer->timeout), &timer_val, sizeof(struct timeval));
@@ -148,10 +184,134 @@
 			pthread_mutex_unlock(&timerMutex);
 		}
 
-		timer_val.tv_sec = 1;
-		timer_val.tv_usec = 0;
+		timer_val.tv_sec = 0;
+		timer_val.tv_usec = IDLE_TIME;
 		select(0, NULL, NULL, NULL, (struct timeval *)&timer_val);
 	}
+
+#else
+	proc_element_t *temp_element = NULL;
+	timer_list_init(&temp_list);
+
+	while(timer_thread_running){
+		//**********************************
+		//*** For One-shot/Non-Periodic Timer.
+		//**********************************
+		//gettimeofday(&timer_val, NULL);
+		getSystemUptime(&timer_val);
+		memset(&iter, 0, sizeof(timer_list_iterator_t));
+
+		pthread_mutex_lock(&timerMutex);
+		uitimer = (CMTimer_t*) timer_list_get_first( &time_list, &iter );
+		while(uitimer && timer_thread_running){
+			if(	(uitimer->timeout.tv_sec > timer_val.tv_sec) ||
+				((uitimer->timeout.tv_sec == timer_val.tv_sec) &&(uitimer->timeout.tv_usec > timer_val.tv_usec))	){
+				uitimer = (CMTimer_t*) timer_list_get_next( &iter );
+
+				continue;
+			}
+
+			timer_list_iterator_remove(&iter);
+
+			temp_element = (proc_element_t*)malloc(sizeof(proc_element_t));
+			temp_element->element = (void*)malloc(sizeof(CMTimer_t));
+			memcpy(temp_element->element, uitimer, sizeof(CMTimer_t));
+			temp_element->type = ONE_SHOT_TIMER;
+			//Timeout timer record to temp List.
+			timer_list_add(&temp_list, temp_element, 0);
+			temp_element = NULL;
+			//Moving timeout function execution after checking One-shot/Non-Periodic Timer list.
+
+			ZOS_FREE(uitimer);
+			uitimer = NULL;
+			memset(&iter, 0, sizeof(timer_list_iterator_t));
+			uitimer = (CMTimer_t*) timer_list_get_first( &time_list, &iter );
+		}
+		pthread_mutex_unlock(&timerMutex);
+
+		//**********************************
+		//*** For Periodic Timer.
+		//**********************************
+		memset(&iter, 0, sizeof(timer_list_iterator_t));
+
+		pthread_mutex_lock(&timerMutex);
+		uitimer = (CMTimer_t*) timer_list_get_first( &periodic_time_list, &iter );
+		while(uitimer && timer_thread_running){
+			if(	(uitimer->timeout.tv_sec > timer_val.tv_sec) ||
+				((uitimer->timeout.tv_sec == timer_val.tv_sec) &&(uitimer->timeout.tv_usec > timer_val.tv_usec))	){
+				uitimer = (CMTimer_t*) timer_list_get_next( &iter );
+
+				continue;
+			}
+
+			temp_element = (proc_element_t*)malloc(sizeof(proc_element_t));
+
+			//pthread_mutex_lock(&uitimer->timerMutex);
+			uitimer->status = PROC_STATUS;
+			//pthread_mutex_unlock(&uitimer->timerMutex);
+			temp_element->element = (void*)uitimer;
+			temp_element->type = PERIODIC_TIMER;
+			memcpy(&(temp_element->iter), &iter, sizeof(timer_list_iterator_t));
+			//printf("%s()  Add to Tmp TimerId(%d) status(%d).. sec:%d usec:%d\n",__FUNCTION__, uitimer->TimerID, uitimer->status, uitimer->timeout.tv_sec, uitimer->timeout.tv_usec);
+			//printf("Parse periodic_time_list to add to temp_list type:%d id:%d time:%d\n", temp_element->type, uitimer->TimerID, uitimer->TimerLen);
+			//Timeout timer record to temp List.
+			timer_list_add(&temp_list, temp_element, 0);
+			temp_element = NULL;
+			uitimer = (CMTimer_t*) timer_list_get_next( &iter );
+		}
+		pthread_mutex_unlock(&timerMutex);
+
+		memset(&iter, 0, sizeof(timer_list_iterator_t));
+
+		temp_element = (proc_element_t*)timer_list_get_first( &temp_list, &iter );
+		while(temp_element && timer_thread_running){
+			uitimer = (CMTimer_t*)temp_element->element;
+
+			//The timeout function is executed
+			if(uitimer->fn) {
+				uitimer->fn(uitimer->TimerID, uitimer->data);
+			}
+
+			if(temp_element->type == PERIODIC_TIMER){
+				pthread_mutex_lock(&uitimer->timerMutex);
+				//printf("%s()  PERIODIC_TIMER\tTimerId(%d) status(%d).. \n",__FUNCTION__, uitimer->TimerID, uitimer->status);
+				if(uitimer->status == PROC_STATUS){
+					//Periodic timer keep going
+					memset(&(uitimer->timeout), 0, sizeof(struct timeval));
+					memcpy(&(uitimer->timeout), &timer_val, sizeof(struct timeval));
+					uitimer->timeout.tv_sec  +=  uitimer->TimerLen / 1000;
+					uitimer->timeout.tv_usec  +=  (uitimer->TimerLen % 1000) * 1000;
+					uitimer->status = IDLE_STATUS;
+				}
+				else//(uitimer->status == DEL_STATUS)
+				{
+					//Delete periodic timer
+					timer_list_iterator_remove(&(temp_element->iter));
+					//printf("%s()  Delete TimerID(%d) .. \n", __FUNCTION__, uitimer->TimerID);
+				}
+				pthread_mutex_unlock(&uitimer->timerMutex);
+
+				if(uitimer->status == DEL_STATUS){
+					ZOS_FREE(uitimer);
+				}
+			}
+			else{
+				ZOS_FREE(uitimer);
+			}
+			ZOS_FREE(temp_element);
+
+			timer_list_iterator_remove(&iter);
+
+			memset(&iter, 0, sizeof(timer_list_iterator_t));
+			temp_element = (proc_element_t*)timer_list_get_first( &temp_list, &iter );
+		}
+		
+		timer_val.tv_sec = 0;
+		timer_val.tv_usec = IDLE_TIME; /* 100 ms idle */
+		select(0, NULL, NULL, NULL, (struct timeval *)&timer_val);
+	}
+#endif
+
 	pthread_exit(NULL);
 	return NULL;
 }
@@ -168,15 +328,16 @@
 	{
 		return res;
 	}
+	memset(uitimer, 0, sizeof(CMTimer_t));
 
 //	gettimeofday(&uitimer->timeout, NULL);
 	getSystemUptime(&uitimer->timeout);
 	uitimer->TimerID = id;
 	uitimer->TimerLen = timerLen;
 #if 1  /* Solve inaccurate timer problem. Root cause: no consider that milisecond carry to second. Wayne fixed at 20090703. */
-	uitimer->timeout.tv_usec  +=  timerLen*1000;
-	uitimer->timeout.tv_sec  +=  uitimer->timeout.tv_usec/1000000;
-	uitimer->timeout.tv_usec  =  uitimer->timeout.tv_usec%1000000;
+	uitimer->timeout.tv_usec  +=  (timerLen % 1000) * 1000;
+	uitimer->timeout.tv_sec  +=  timerLen / 1000 + uitimer->timeout.tv_usec / 1000000;
+	uitimer->timeout.tv_usec  =  uitimer->timeout.tv_usec % 1000000;
 #else
 	uitimer->timeout.tv_sec  +=  timerLen/1000;
 	uitimer->timeout.tv_usec  +=  (timerLen%1000)*1000;
@@ -186,7 +347,6 @@
 
 	pthread_mutex_lock(&timerMutex);
 	intimer =(CMTimer_t*) timer_list_get_first( &time_list, &iter );
-	pthread_mutex_unlock(&timerMutex);
 	while(intimer){
 		if(intimer->TimerID==id){
 			intimer->TimerID=id;
@@ -194,16 +354,16 @@
 			intimer->timeout.tv_usec=uitimer->timeout.tv_usec;
 			intimer->data= (void*)privdata;
 			intimer->fn=timefn;
-
+			pthread_mutex_unlock(&timerMutex);
 			return 0;
 		}
-		pthread_mutex_lock(&timerMutex);
+
 		intimer=timer_list_get_next( &iter );
-		pthread_mutex_unlock(&timerMutex);
 	}
-	pthread_mutex_lock(&timerMutex);
+
 	res=timer_list_add(& time_list, uitimer, iter.pos )>0 ? 0: -1;
 	pthread_mutex_unlock(&timerMutex);
+
 	return res;
 }
 
@@ -219,52 +379,67 @@
 	{
 		return res;
 	}
+	memset(uitimer, 0, sizeof(CMTimer_t));
 
 	//gettimeofday(&uitimer->timeout, NULL);
 	getSystemUptime(&uitimer->timeout);
 	uitimer->TimerID = id;
 	uitimer->TimerLen = timerLen;
+#if 1  /* Solve inaccurate timer problem. Root cause: no consider that milisecond carry to second. Wayne fixed at 20090703. */
+	uitimer->timeout.tv_usec  +=  (timerLen % 1000) * 1000;
+	uitimer->timeout.tv_sec  +=  timerLen / 1000 + uitimer->timeout.tv_usec / 1000000;
+	uitimer->timeout.tv_usec  =  uitimer->timeout.tv_usec % 1000000;
+#else
 	uitimer->timeout.tv_sec  +=  timerLen/1000;
 	uitimer->timeout.tv_usec  +=  (timerLen%1000)*1000;
+#endif
 	uitimer->data = (void*)privdata;
+	uitimer->status = IDLE_STATUS;
 	uitimer->fn = timefn;
 
+	pthread_mutex_init(&uitimer->timerMutex, NULL);
+
 	pthread_mutex_lock(&timerMutex);
 	intimer =(CMTimer_t*) timer_list_get_first( &periodic_time_list, &iter );
-	pthread_mutex_unlock(&timerMutex);
 	while(intimer){
 		if(intimer->TimerID==id){
 			intimer->TimerID=id;
 			intimer->timeout.tv_sec=uitimer->timeout.tv_sec;
 			intimer->timeout.tv_usec=uitimer->timeout.tv_usec;
 			intimer->data= (void*)privdata;
+			intimer->status = uitimer->status;
 			intimer->fn=timefn;
-
+			pthread_mutex_unlock(&timerMutex);
 			return 0;
 		}
-		pthread_mutex_lock(&timerMutex);
+
 		intimer=timer_list_get_next( &iter );
-		pthread_mutex_unlock(&timerMutex);
 	}
-	pthread_mutex_lock(&timerMutex);
 	res=timer_list_add(& periodic_time_list, uitimer, iter.pos )>0 ? 0: -1;
 	pthread_mutex_unlock(&timerMutex);
+
 	return res;
 }
 
 int UIDelTimer(int id, void **dataptr){
+	int ret = TIMER_STOP_SUCCESS;
 	CMTimer_t *uitimer=NULL;
 	timer_list_iterator_t iter;
-	int found = 0;
+	bool found = FALSE;
+
+	if (id <= 0) {
+		return TIMER_STOP_NOT_FOUND;
+	}
 
 	pthread_mutex_lock(&timerMutex);
 	uitimer =(CMTimer_t*) timer_list_get_first( &time_list, &iter );
-	pthread_mutex_unlock(&timerMutex);
 	while(uitimer){
 		if(uitimer->TimerID !=id){
-			pthread_mutex_lock(&timerMutex);
 			uitimer =(CMTimer_t*) timer_list_get_next( &iter );
-			pthread_mutex_unlock(&timerMutex);
+
+			if((NULL == uitimer) && !found) {
+				ret = TIMER_STOP_NOT_FOUND;
+			}
 			continue;
 		}
 		found = id;
@@ -275,40 +450,163 @@
 		ZOS_FREE(uitimer);
 		uitimer = NULL;
 		memset(&iter,0,sizeof(timer_list_iterator_t));
-		pthread_mutex_lock(&timerMutex);
 		uitimer =(CMTimer_t*) timer_list_get_first( &time_list, &iter );
-		pthread_mutex_unlock(&timerMutex);
 	}
+	pthread_mutex_unlock(&timerMutex);
 
-	return found;
+	return ret;
+}
+
+// Add from ZyIMS
+int UIDelTimer_retDataPtr( int id, void **dataPtr ){
+	int ret = TIMER_STOP_SUCCESS;
+	CMTimer_t *uitimer = NULL;
+	timer_list_iterator_t iter;
+	bool isEverFound = FALSE;
+
+	if (id <= 0) {
+		ret = TIMER_STOP_NOT_FOUND;
+		return ret;
+	}
+
+	if (NULL == dataPtr){
+		ret = TIMER_STOP_FAIL;
+		return ret;
+	}
+
+	pthread_mutex_lock(&timerMutex);
+	uitimer = (CMTimer_t*) timer_list_get_first( &time_list, &iter );
+	while(uitimer){
+		if(uitimer->TimerID != id){
+
+			uitimer = (CMTimer_t*) timer_list_get_next( &iter );
+
+			if((NULL == uitimer) && !isEverFound) {
+				ret = TIMER_STOP_NOT_FOUND;
+			}
+			continue;
+		}
+		isEverFound = TRUE;
+
+		timer_list_iterator_remove(&iter);
+
+		*dataPtr = uitimer->data;
+
+		ZOS_FREE(uitimer);
+		uitimer = NULL;
+		memset(&iter, 0, sizeof(timer_list_iterator_t));
+		uitimer = (CMTimer_t*) timer_list_get_first( &time_list, &iter );
+	}
+	pthread_mutex_unlock(&timerMutex);
+
+	return ret; //Ret: 0:Success, (-1):Fail/Error, 1:Timer-ID is NOT in the Timer List.
 }
 
 int UIDelPeriodicTimer(int id, void **dataptr){
+	int ret = TIMER_STOP_SUCCESS;
 	CMTimer_t *uitimer=NULL;
 	timer_list_iterator_t iter;
+	bool found = FALSE;
+
+	if (id <= 0) {
+		return TIMER_STOP_NOT_FOUND;
+	}
+	//printf("%s(): delete timer id(%d).\n", __FUNCTION__, id);
+
 	pthread_mutex_lock(&timerMutex);
 	uitimer =(CMTimer_t*) timer_list_get_first( &periodic_time_list, &iter );
-	pthread_mutex_unlock(&timerMutex);
 	while(uitimer){
 		if(uitimer->TimerID !=id){
-			pthread_mutex_lock(&timerMutex);
+
 			uitimer =(CMTimer_t*) timer_list_get_next( &iter );
-			pthread_mutex_unlock(&timerMutex);
+
+			if((NULL == uitimer) && !found) {
+				ret = TIMER_STOP_NOT_FOUND;
+			}
 			continue;
 		}
+		found = TRUE;
+
 		if(NULL != dataptr){
 			*dataptr = uitimer->data;
 		}
-		timer_list_iterator_remove(&iter);
-		ZOS_FREE(uitimer);
-		uitimer = NULL;
-		memset(&iter,0,sizeof(timer_list_iterator_t));
-		pthread_mutex_lock(&timerMutex);
-		uitimer =(CMTimer_t*) timer_list_get_first( &periodic_time_list, &iter );
-		pthread_mutex_unlock(&timerMutex);
+
+		if(uitimer->status == PROC_STATUS){
+			//Marking the timer has been deleted
+			pthread_mutex_lock(&uitimer->timerMutex);
+			uitimer->status = DEL_STATUS;
+			pthread_mutex_unlock(&uitimer->timerMutex);
+			uitimer = (CMTimer_t*) timer_list_get_next( &iter );
+		}
+		else{
+			timer_list_iterator_remove(&iter);
+			ZOS_FREE(uitimer);
+			uitimer = NULL;
+			memset(&iter,0,sizeof(timer_list_iterator_t));
+
+			uitimer =(CMTimer_t*) timer_list_get_first( &periodic_time_list, &iter );
+		}
+	}
+	pthread_mutex_unlock(&timerMutex);
+
+	return ret;
+}
+
+// Add from ZyIMS
+int UIDelPeriodicTimer_retDataPtr( int id, void **dataPtr ){
+	int ret = TIMER_STOP_SUCCESS;
+	CMTimer_t *uitimer = NULL;
+	timer_list_iterator_t iter;
+	bool isEverFound = FALSE;
+
+	//printf("%s(): delete timer id(%d).\n", __FUNCTION__, id);
+
+	if (id <= 0) {
+		ret = TIMER_STOP_NOT_FOUND;
+		return ret;
 	}
 
-	return 0;
+	if (NULL == dataPtr){
+		ret = TIMER_STOP_FAIL;
+		return ret;
+	}
+
+	pthread_mutex_lock(&timerMutex);
+	uitimer = (CMTimer_t*) timer_list_get_first( &periodic_time_list, &iter );
+	while(uitimer){
+		if(uitimer->TimerID != id){
+
+			uitimer = (CMTimer_t*) timer_list_get_next( &iter );
+
+			if((NULL == uitimer) && !isEverFound) {
+				ret = TIMER_STOP_NOT_FOUND;
+			}
+			continue;
+		}
+		isEverFound = TRUE;
+
+		if(uitimer->status == PROC_STATUS){
+			//Marking the timer has been deleted
+			pthread_mutex_lock(&uitimer->timerMutex);
+			uitimer->status = DEL_STATUS;
+			pthread_mutex_unlock(&uitimer->timerMutex);
+			uitimer = (CMTimer_t*) timer_list_get_next( &iter );
+		}
+		else{
+			timer_list_iterator_remove(&iter);
+
+			*dataPtr = uitimer->data;
+
+			ZOS_FREE(uitimer);
+			uitimer = NULL;
+			memset(&iter, 0, sizeof(timer_list_iterator_t));
+
+			uitimer = (CMTimer_t*) timer_list_get_first( &periodic_time_list, &iter );
+		}
+	}
+	pthread_mutex_unlock(&timerMutex);
+
+	return ret; //Ret: 0:Success, (-1):Fail/Error, 1:Timer-ID is NOT in the Timer List.
 }
 
 int UIDelAllTimer(void){
Index: libzyuitimer-1.0/uitimer.h
===================================================================
--- libzyuitimer-1.0.orig/uitimer.h	2020-06-16 15:54:54.460826925 +0800
+++ libzyuitimer-1.0/uitimer.h	2020-06-16 15:54:54.484814911 +0800
@@ -27,6 +27,7 @@
 
 #include <stdio.h>
 #include <stdint.h>
+#include "timer_list.h"
 
 #define IDLE_TIME 10000
 #define EDIT_TIMER 0x99
@@ -37,7 +38,18 @@
 #define SWITCH_TIMER 0x498
 #define RESTORE_TIMER 0x499
 
-typedef void (*TMRFUNC)(void *);
+#define TIMER_STOP_FAIL			(-1)
+#define TIMER_STOP_SUCCESS		0
+#define TIMER_STOP_NOT_FOUND	1	//Timer-ID is NOT in the Timer List.
+
+#define IDLE_STATUS	0
+#define PROC_STATUS	1
+#define DEL_STATUS	2
+
+#define ONE_SHOT_TIMER 0
+#define PERIODIC_TIMER 1
+
+typedef int (*TMRFUNC)(int,void *);
 
 /*new a time structure for longer timeout, ZyXEL*/
 struct timeval_t {
@@ -50,9 +62,17 @@
 	void *data;		/* private data of timer */
 	uint32_t TimerLen; /*change "timerLen" type to uint32 for longer timeout, ZyXEL*/
 	struct timeval_t	timeout;		/* timeout time of timer */
+	unsigned char status; //IDLE_STATUS, PROC_STATUS, DEL_STATUS
 	TMRFUNC fn;
+	pthread_mutex_t timerMutex;
 }CMTimer_t;
 
+typedef struct proc_element_t {
+	unsigned char type;
+	void *element;
+	timer_list_iterator_t iter;
+}proc_element_t;
+
 void UITimer_Init(void);
 void UITimer_Destory(void);
 /*change "timerLen" type to uint32 for longer timeout, ZyXEL*/
@@ -66,7 +86,10 @@
 
 enum { 
 	saveConfigTimerID = 1,
-	syncDHCP4SrvTimerID
+	syncDHCP4SrvTimerID,
+	wifiDiagRunningTimerID,
+	syncBrSetMacAddrLearningTimerID,
+	rebootTimerID
 };
 
 
