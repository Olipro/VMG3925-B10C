Index: libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_operatingmodes.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/wireless/zcfg_fe_dal_wifi_operatingmodes.c	2020-04-13 10:12:28.573822003 +0800
+++ libzcfg_fe_dal-1.0/network/wireless/zcfg_fe_dal_wifi_operatingmodes.c	2020-04-16 14:24:56.807317496 +0800
@@ -105,17 +105,23 @@
 }
 
 zcfgRet_t zcfgFeDalWifiOperatingModesEdit(struct json_object *Jobj, char *replyMsg){
-    zcfgRet_t ret = ZCFG_SUCCESS;
-    objIndex_t ssidIid, epIid, repIid, epProfIid;
-    struct json_object *ssidObj = NULL, *epProfObj = NULL, *epProfSecObj = NULL, *repObj = NULL, *epObj = NULL;
-    unsigned int POS_NONE = 43, POS_BASIC = 149, POS_MORESECURE = 255;
-    char *SSIDReference;
-    char *SSID = json_object_get_string(json_object_object_get(Jobj, "SSID"));
-    char *psk_value = json_object_get_string(json_object_object_get(Jobj, "psk_value"));
-    char *wpaMode = json_object_get_string(json_object_object_get(Jobj, "wpaMode"));
-    char *ssidRef = json_object_get_string(json_object_object_get(Jobj, "ssidRef"));
-    int  secMode = json_object_get_int(json_object_object_get(Jobj, "secMode"));
-    char *Mode = json_object_get_string(json_object_object_get(Jobj, "Mode"));
+	zcfgRet_t ret = ZCFG_SUCCESS;
+	objIndex_t ssidIid, epIid, repIid, epProfIid;
+	struct json_object *ssidObj = NULL, *epProfObj = NULL, *epProfSecObj = NULL, *epSecObj = NULL, *repObj = NULL, *epObj = NULL, *epWpsObj = NULL;
+	struct json_object *enable = NULL, *enablePBC = NULL, *enableStaPin = NULL, *enableAPPin = NULL;
+	unsigned int POS_NONE = 43, POS_BASIC = 149, POS_MORESECURE = 255;
+	char ModesSupported[200] = {0};
+	char *SSIDReference;
+	char *SSID = json_object_get_string(json_object_object_get(Jobj, "SSID"));
+	char *psk_value = json_object_get_string(json_object_object_get(Jobj, "psk_value"));
+	char *wpaMode = json_object_get_string(json_object_object_get(Jobj, "wpaMode"));
+	char *ssidRef = json_object_get_string(json_object_object_get(Jobj, "ssidRef"));
+	int  secMode = json_object_get_int(json_object_object_get(Jobj, "secMode"));
+	char *Mode = json_object_get_string(json_object_object_get(Jobj, "Mode"));
+	enable = json_object_object_get(Jobj, "enableWPS");
+	enablePBC = json_object_object_get(Jobj, "enablePBC");
+	enableStaPin = json_object_object_get(Jobj, "enableStaPin");
+	enableAPPin = json_object_object_get(Jobj, "enableAPPin");
 
     if(ssidRef) {
         IID_INIT(epIid);
@@ -140,34 +146,60 @@
                         zcfgFeJsonObjFree(epProfObj);
                     }
                 }
-                if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_END_POINT_PROFILE_SEC, &epProfIid, &epProfSecObj) == ZCFG_SUCCESS) {
-                    if(psk_value) json_object_object_add(epProfSecObj,"KeyPassphrase", json_object_new_string(psk_value));
-                    if(secMode){
-                        if(secMode == POS_NONE){
-                            json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("None"));
-                        }else if(secMode == POS_MORESECURE){
-                            if(wpaMode){
-                                if(!strcmp(wpaMode,"wpa2psk")){
-                                    json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
-                                }else if(!strcmp(wpaMode,"wpapsk")){
-                                    json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
-                                }else if(!strcmp(wpaMode,"wpawpa2psk")){
-                                    json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
-                                }else if(!strcmp(wpaMode,"wpa")){
-                                    json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("WPA-Enterprise"));
-                                }else if(!strcmp(wpaMode,"wpa2")){
-                                    json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("WPA2-Enterprise"));
-                                }else if(!strcmp(wpaMode,"wpa3sae")){
-                                    json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("WPA3-Personal"));
-                                }else if(!strcmp(wpaMode,"wpa2pskwpa3sae")){
-                                    json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("WPA3-Personal-Transition"));
-                                }
-                            }
-                        }
-                    }
-                    zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_END_POINT_PROFILE_SEC, &epProfIid, epProfSecObj, NULL);
-                    zcfgFeJsonObjFree(epProfSecObj);
-                }
+				if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_END_POINT_SEC, &epIid, &epSecObj) == ZCFG_SUCCESS) {
+					strcpy(ModesSupported, json_object_get_string(json_object_object_get(epSecObj, "ModesSupported")));
+					zcfgFeJsonObjFree(epSecObj);
+				}
+				if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_END_POINT_PROFILE_SEC, &epProfIid, &epProfSecObj) == ZCFG_SUCCESS) {
+					if(psk_value) json_object_object_add(epProfSecObj,"KeyPassphrase", json_object_new_string(psk_value));
+					if(secMode){
+						if(secMode == POS_NONE){
+							json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("None"));
+						}else if(secMode == POS_MORESECURE){
+							if(wpaMode){
+								if(!strcmp(wpaMode,"wpa2psk") && strstr(ModesSupported, "WPA2")){
+									json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
+								}else if(!strcmp(wpaMode,"wpa2") && strstr(ModesSupported, "WPA2")){
+									json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("WPA2-Enterprise"));
+								}
+#ifdef ZYXEL_WIFI_SUPPORT_WEP_WPA_MIXMODE
+								else if(!strcmp(wpaMode,"wpapsk") && strstr(ModesSupported, "WPA-")){
+									json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("WPA-Personal"));
+								}else if(!strcmp(wpaMode,"wpa") && strstr(ModesSupported, "WPA-")){
+									json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("WPA-Enterprise"));
+								}
+#endif
+								else if(!strcmp(wpaMode,"wpawpa2psk")){
+									if(strstr(ModesSupported, "WPA-")){
+										json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("WPA-WPA2-Personal"));
+									}else if(strstr(ModesSupported, "WPA2")){
+										json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
+									}
+								}else if(!strcmp(wpaMode,"wpa3sae") && strstr(ModesSupported, "WPA3")){
+									json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("WPA3-Personal"));
+								}else if(!strcmp(wpaMode,"wpa2pskwpa3sae")){
+									if(strstr(ModesSupported, "WPA3")){
+										json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("WPA3-Personal-Transition"));
+									}else if(strstr(ModesSupported, "WPA2")){
+									json_object_object_add(epProfSecObj, "ModeEnabled", json_object_new_string("WPA2-Personal"));
+									}
+								}else{
+									ret = ZCFG_INVALID_PARAM_VALUE;
+								}
+							}
+						}
+					}
+					zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_END_POINT_PROFILE_SEC, &epProfIid, epProfSecObj, NULL);
+					zcfgFeJsonObjFree(epProfSecObj);
+				}
+				if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_WIFI_END_POINT_WPS, &epIid, &epWpsObj) == ZCFG_SUCCESS) {
+					if(enable) json_object_object_add(epWpsObj,"Enable", JSON_OBJ_COPY(enable));
+					if(enablePBC) json_object_object_add(epWpsObj,"X_ZYXEL_WPS_EnablePBC", JSON_OBJ_COPY(enablePBC));
+					if(enableStaPin) json_object_object_add(epWpsObj,"X_ZYXEL_WPS_EnableStaPin", JSON_OBJ_COPY(enableStaPin));
+					if(enableAPPin) json_object_object_add(epWpsObj,"X_ZYXEL_WPS_EnableAPPin", JSON_OBJ_COPY(enableAPPin));
+					zcfgFeObjJsonSetWithoutApply(RDM_OID_WIFI_END_POINT_WPS, &epIid, epWpsObj, NULL);
+					zcfgFeJsonObjFree(epWpsObj);
+				}
                 zcfgFeJsonObjFree(epObj);
                 break;
             }
