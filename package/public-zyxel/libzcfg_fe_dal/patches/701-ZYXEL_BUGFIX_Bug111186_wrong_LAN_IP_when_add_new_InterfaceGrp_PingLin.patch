diff -ruN a/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c b/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c
--- a/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2019-09-03 10:14:25.000000000 +0800
+++ b/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2019-09-03 10:37:52.721932152 +0800
@@ -3,6 +3,7 @@
 //#include <json/json_object.h>
 #include <time.h>
 #include <string.h>
+#include <arpa/inet.h>
 
 #include "zcfg_common.h"
 #include "zcfg_fe_rdm_string.h"
@@ -79,22 +80,25 @@
 
 	
 	
-zcfgRet_t FindIPidx(int* IP_idx, objIndex_t newBrIid) {
+#if 1
+zcfgRet_t FindIPidx(char* newIP, objIndex_t newBrIid)
+#else
+zcfgRet_t FindIPidx(int* IP_idx, objIndex_t newBrIid)
+#endif
+{
 	zcfgRet_t ret = ZCFG_SUCCESS;
-	json_object* bridgingBrObj = NULL;
-	json_object* ipIntfObj = NULL;
 	json_object* v4AddrObj = NULL;
-	objIndex_t bridgingBrIid;
 	objIndex_t v4AddrIid;
 	s_AllIpRangeInfo avlIpRange;
-	char temp[30];
-	char BridgePortStr[50];
-	char BridgePortStr_2[30];
 	uint32_t IPAddress;
 	uint32_t SubnetMask;
 	int i = 0;
-	int ipIndex;
-	uint32_t ipS, ipE = 0;
+	int ipIndex = 0;
+	uint32_t ipS = 0, ipE = 0;
+
+#if 1
+	int ipIdx1 = 192, ipIdx2 = 168;
+#endif
 
 	memset(&avlIpRange, 0, sizeof(avlIpRange));
 	IID_INIT(v4AddrIid);
@@ -115,6 +119,42 @@
 
 	/*make sure the ipS~ipE not be used in avlIpRange*/
 	ipIndex = newBrIid.idx[0];
+	
+#if 1
+	while(1)
+	{
+		ipS = (ipIdx1 << 24) + (ipIdx2 << 16) + (ipIndex << 8) + 0;
+		ipE = ipS + 255;
+		for(i = 0; i < avlIpRange.length; i++)
+		{
+			if((avlIpRange.ipRangInfo[i].Start <= ipS && ipS <= avlIpRange.ipRangInfo[i].End) &&
+				(avlIpRange.ipRangInfo[i].Start <= ipE && ipE <= avlIpRange.ipRangInfo[i].End))
+				break;
+		}
+		if(i >= avlIpRange.length)
+			break;
+		if(ipIdx2 < 255 && ipIndex >= 255)
+		{
+			//192.168.255.X
+			ipIdx2++;
+			ipIndex = 1;
+		}
+		else if(ipIdx2 >= 255 && ipIndex >= 255)
+		{
+			//192.255.255.X
+			ipIdx1++;
+			ipIdx2 = 1;
+			ipIndex = 1;
+		}
+		else
+		{
+			//192.168.X.X
+			ipIndex++;
+		}
+	}
+	sprintf(newIP, "%d.%d.%d.1", ipIdx1, ipIdx2, ipIndex);
+#else
+
 	while(ipIndex <= 255) {
 		ipS = (192<<24) + (168<<16) + (ipIndex<<8) + 0;
 		ipE = ipS + 255;
@@ -128,6 +168,7 @@
 		ipIndex++;
 	}
 	*IP_idx = ipIndex;
+#endif
 	return ret;
 }
 
@@ -452,9 +493,12 @@
 zcfgRet_t dalcmdIntrGrpAdd(struct json_object *Jobj, char *replyMsg) {
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *obj = NULL;
-
+#if 1
+	char newIPAddress[16] = {0};
+	struct in_addr ip, mask, startip, endip;
+#else
 	int IP_idx;
-	
+#endif	
 	char IPAddress_str1[60] = {0};
 	char tmp[10] = {0};
 	char SubnetMask_str[30] = {0};
@@ -610,9 +654,16 @@
 
 	zcfgFeObjJsonBlockedSet(RDM_OID_IP_IFACE, &newIpIid, newIpObj, NULL);
     /*==============================================================================*/
+#if 1
+	if((ret = FindIPidx(newIPAddress, newBrIid)) != ZCFG_SUCCESS)
+	{
+		return ret;
+	}
+#else
 	if((ret = FindIPidx(&IP_idx, newBrIid)) != ZCFG_SUCCESS) {
 		return ret;
 	}
+#endif
 	memcpy(&v4AddrIid, &newIpIid, sizeof(objIndex_t));
 	if((ret = zcfgFeObjJsonAdd(RDM_OID_IP_IFACE_V4_ADDR, &v4AddrIid, NULL)) != ZCFG_SUCCESS) {
 		return ret;
@@ -620,7 +671,11 @@
 	if((ret = zcfgFeObjJsonGetWithoutUpdate(RDM_OID_IP_IFACE_V4_ADDR, &v4AddrIid, &v4AddrObj)) != ZCFG_SUCCESS) {
 		return ret;
 	}
+#if 1
+	strcpy(IPAddress_str1, newIPAddress);
+#else
 	sprintf(IPAddress_str1,"192.168.%d.1",IP_idx);
+#endif
 	strcat(SubnetMask_str, "255.255.255.0");
 	json_object_object_add(v4AddrObj, "Enable", json_object_new_boolean(true));
 	json_object_object_add(v4AddrObj, "IPAddress", json_object_new_string(IPAddress_str1));
@@ -709,8 +764,22 @@
 	char DhcpAddrMax[30] = {0};
 	char IpIntf_str[30] = "IP.Interface.";
 
+#if 1
+	//refer to zcfg_be\libzcfg_be\libzcfg_be_lan\zcfg_be_lan.c calcIPRange()
+	inet_pton(AF_INET, json_object_get_string(json_object_object_get(v4AddrObj, "IPAddress")), &ip);
+	inet_pton(AF_INET, json_object_get_string(json_object_object_get(v4AddrObj, "SubnetMask")), &mask);
+	startip.s_addr = (ip.s_addr & mask.s_addr) + htonl(1);
+	if(startip.s_addr == ip.s_addr)
+		startip.s_addr += htonl(1);
+	endip.s_addr = (ip.s_addr | ~mask.s_addr) - htonl(1);
+	if(endip.s_addr == ip.s_addr)
+		endip.s_addr -= htonl(1);
+	inet_ntop(AF_INET, &startip, DhcpAddrMin, INET_ADDRSTRLEN);
+	inet_ntop(AF_INET, &endip, DhcpAddrMax, INET_ADDRSTRLEN);
+#else
 	sprintf(DhcpAddrMin,"192.168.%d.2",IP_idx);
 	sprintf(DhcpAddrMax,"192.168.%d.254",IP_idx);
+#endif
 	sprintf(IpIntf_str,"IP.Interface.%d",newIpIid.idx[0]);
 
 	json_object_object_add(dhcpV4SrvObj, "Enable", json_object_new_boolean(true));
