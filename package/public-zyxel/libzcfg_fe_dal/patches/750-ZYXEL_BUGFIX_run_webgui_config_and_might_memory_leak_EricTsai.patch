Index: libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_lansetup.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/homeNetworking/zcfg_fe_dal_lansetup.c	2020-02-27 14:51:19.000000000 +0800
+++ libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_lansetup.c	2020-02-27 14:52:32.213482970 +0800
@@ -300,7 +300,7 @@
 								}
 								group = true;
 							}
-							single_ipInt = strtok_r(rest_str, ",", &rest_str);
+							single_ipInt = strtok_r(NULL, ",", &rest_str);
 						}
 						free(ipInt);
 					}
@@ -353,7 +353,7 @@
 
 	IID_INIT(iid);
 	brtmpname = json_object_get_string(json_object_object_get(Jobj, "Name"));
-	if(!strcmp(brtmpname, "Default")){
+	if(brtmpname && !strcmp(brtmpname, "Default")){
 		brIfName = "br0";
 	}
 	else{
@@ -366,7 +366,7 @@
 		}		
 	}
 	IID_INIT(igmpSnoopingIid);
-	if(zcfgFeObjJsonGet(RDM_OID_ZY_IGMP, &igmpSnoopingIid, &igmpSnoopingObj) == ZCFG_SUCCESS){
+	if(brIfName && !strncmp(brIfName, "br", 2) && zcfgFeObjJsonGet(RDM_OID_ZY_IGMP, &igmpSnoopingIid, &igmpSnoopingObj) == ZCFG_SUCCESS){
 		igmpSnooping = json_object_get_string(json_object_object_get(igmpSnoopingObj, "SnoopingBridgeIfName"));	
 		if(igmpSnooping != NULL){
 			strcpy(buff, igmpSnooping);
@@ -381,7 +381,7 @@
 					strcat(newbrstr, newbrtmp);
 					strcat(newbrstr, ",");
 				}
-				brname = strtok_r(tmp, ",", &tmp);
+				brname = strtok_r(NULL, ",", &tmp);
 			}
 			len = strlen(newbrstr);
 			if(newbrstr[len-1] == ',')
@@ -432,7 +432,7 @@
 
 	IID_INIT(iid);
 	brtmpname = json_object_get_string(json_object_object_get(Jobj, "Name"));
-	if(!strcmp(brtmpname, "Default")){
+	if(brtmpname && !strcmp(brtmpname, "Default")){
 		brIfName = "br0";
 	}
 	else{
@@ -451,16 +451,16 @@
 			strcpy(buff, mldSnooping);
 			brname = strtok_r(buff, ",", &tmp);
 			while(brname != NULL){
-				if(strncmp(brIfName,brname,3)){
+				if(!brIfName || strncmp(brIfName,brname,3)){
 					strcat(newbrstr, brname);
 					strcat(newbrstr, ",");
-			}
-			else{
+				}
+				else if(brIfName){
 					sprintf(newbrtmp, "%s|%d", brIfName, brsnoopingenable);
 					strcat(newbrstr, newbrtmp);
 					strcat(newbrstr, ",");
 				}
-				brname = strtok_r(tmp, ",", &tmp);
+				brname = strtok_r(NULL, ",", &tmp);
 			}
 			len = strlen(newbrstr);
 			if(newbrstr[len-1] == ',')
@@ -512,6 +512,7 @@
 
 	if (!strcmp(IPAddress,CurIPAddress) && !strcmp(SubnetMask,CurSubnetMask))
 	{
+		//ret = ZCFG_INVALID_PARAM_VALUE;
 		goto done;
 	}
 
@@ -592,7 +593,8 @@
 	if(DHCPType == NULL){
 		if(enableDhcp){
 			printf("\nInvalid parameter: DHCPType\n");
-			return ZCFG_INVALID_PARAM_VALUE;
+			ret = ZCFG_INVALID_PARAM_VALUE;
+			goto out;
 		}
 		else{
 			if(curRelayDhcp)
@@ -607,7 +609,8 @@
 		if(dhcpRelayAddr == NULL){
 			if(curdhcpRelayAddr == NULL || curdhcpRelayAddr[0] == '\0'){
 				printf("\nInvalid parameter: DHCP_RelayAddr\n");
-				return ZCFG_INVALID_PARAM_VALUE;
+				ret = ZCFG_INVALID_PARAM_VALUE;
+				goto out;
 			}
 			else{
 				/*
@@ -637,8 +640,9 @@
 			IID_INIT(dhcpRelayIid);
 			zcfgFeJsonObjFree(dhcpRelayObj);
 			ret = zcfgFeObjJsonAdd(RDM_OID_DHCPV4_RELAY_FWD, &dhcpRelayIid, NULL);
+			ret = (ret == ZCFG_SUCCESS) ? zcfgFeObjJsonGet(RDM_OID_DHCPV4_RELAY_FWD, &dhcpRelayIid, &dhcpRelayObj) : ret;
 			if(ret == ZCFG_SUCCESS){
-				zcfgFeObjJsonGet(RDM_OID_DHCPV4_RELAY_FWD, &dhcpRelayIid, &dhcpRelayObj);
+				//zcfgFeObjJsonGet(RDM_OID_DHCPV4_RELAY_FWD, &dhcpRelayIid, &dhcpRelayObj);
 				json_object_object_add(dhcpRelayObj, "Interface", json_object_new_string(ifacePath));
 				setParam = true;
 			}
@@ -675,13 +679,15 @@
 		else{
 			if(dhcpMinAdr == NULL || dhcpMaxAdr == NULL || leaseTime == 0 || dnsType == NULL ){
 				printf("\nInvalid parameters.\n");
-				return ZCFG_INVALID_PARAM_VALUE;
+				ret = ZCFG_INVALID_PARAM_VALUE;
+				goto out;
 			}
 		}
 		if(!strcmp(dnsType,"Static")){
 			if(dnsServer1 == NULL){
 				printf("\nInvalid parameter: DNS_Servers1\n");
-				return ZCFG_INVALID_PARAM_VALUE;
+				ret = ZCFG_INVALID_PARAM_VALUE;
+				goto out;
 			}
 			strcat(dnsServer, dnsServer1);
 			if(json_object_object_get(Jobj, "DNS_Servers2")){
@@ -739,6 +745,8 @@
 			ret = zcfgFeObjJsonDel(RDM_OID_DHCPV4_RELAY_FWD, &dhcpRelayIid, NULL);
 		}
 	}
+
+out:
 	zcfgFeJsonObjFree(dhcpSrvObj);
 	zcfgFeJsonObjFree(dhcpRelayObj);
 	zcfgFeJsonObjFree(dhcpServerObj);
@@ -774,7 +782,7 @@
 		ret = zcfgFeObjJsonAdd(RDM_OID_RT_ADV_INTF_SET, &radvdIid, NULL);
 		if(ret == ZCFG_SUCCESS){
 			ret = zcfgFeObjJsonGet(RDM_OID_RT_ADV_INTF_SET, &radvdIid, &radvdObj);
-			found = true;
+			found = (ret == ZCFG_SUCCESS) ? true : false;
 		}
 	}
 
@@ -784,25 +792,25 @@
 		
 		ip6LanAddrAssign = json_object_get_string(json_object_object_get(Jobj, "IPv6_LanAddrAssign"));
 		if(json_object_object_get(Jobj, "IPv6_LanAddrAssign")){
-        if(!strcmp(ip6LanAddrAssign, "Stateless")){
-			json_object_object_add(radvdObj, "AdvManagedFlag", json_object_new_boolean(false));
-        }
-        else{ //if(!strcmp(ip6LanAddrAssign, "Stateful")){
-            json_object_object_add(radvdObj, "AdvManagedFlag", json_object_new_boolean(true));
-        }
+			if(ip6LanAddrAssign && !strcmp(ip6LanAddrAssign, "Stateless")){
+				json_object_object_add(radvdObj, "AdvManagedFlag", json_object_new_boolean(false));
+			}
+			else{ //if(!strcmp(ip6LanAddrAssign, "Stateful")){
+				json_object_object_add(radvdObj, "AdvManagedFlag", json_object_new_boolean(true));
+			}
 		}
 
 		ip6DnsAssign = json_object_get_string(json_object_object_get(Jobj, "IPv6_DNSAssign"));
 		if(json_object_object_get(Jobj, "IPv6_DNSAssign")){
-        if(!strcmp(ip6DnsAssign, "DHCP"))//From DHCP6 server
-			json_object_object_add(radvdObj, "AdvOtherConfigFlag", json_object_new_boolean(true));
-        else if(!strcmp(ip6DnsAssign, "RA_DHCP")){//From DHCP6 server and RA
-            json_object_object_add(radvdObj, "AdvOtherConfigFlag", json_object_new_boolean(true));
-			json_object_object_add(radvdObj, "X_ZYXEL_RAandDHCP6S", json_object_new_boolean(true));
-        }
-        else{ //if(!strcmp(ip6DnsAssign, "RA")){
-        	json_object_object_add(radvdObj, "AdvOtherConfigFlag", json_object_new_boolean(false));
-        }
+			if(ip6DnsAssign && !strcmp(ip6DnsAssign, "DHCP"))//From DHCP6 server
+				json_object_object_add(radvdObj, "AdvOtherConfigFlag", json_object_new_boolean(true));
+			else if(ip6DnsAssign && !strcmp(ip6DnsAssign, "RA_DHCP")){//From DHCP6 server and RA
+				json_object_object_add(radvdObj, "AdvOtherConfigFlag", json_object_new_boolean(true));
+				json_object_object_add(radvdObj, "X_ZYXEL_RAandDHCP6S", json_object_new_boolean(true));
+			}
+			else{ //if(!strcmp(ip6DnsAssign, "RA")){
+				json_object_object_add(radvdObj, "AdvOtherConfigFlag", json_object_new_boolean(false));
+			}
 		}
 		
         if(ip6PreTypeStatic){
@@ -817,7 +825,7 @@
 		json_object_object_add(radvdObj, "X_ZYXEL_DNSList", json_object_new_string(dnsList));
 		json_object_object_add(radvdObj, "X_ZYXEL_DNSServers", json_object_new_string(dnsServer));
 		if(json_object_object_get(Jobj, "IPv6_DNSAssign")){
-		if(!strcmp(ip6DnsAssign, "RA_DHCP"))
+		if(ip6DnsAssign && !strcmp(ip6DnsAssign, "RA_DHCP"))
 			json_object_object_add(radvdObj, "X_ZYXEL_RAandDHCP6S", json_object_new_boolean(true));
         else
 			json_object_object_add(radvdObj, "X_ZYXEL_RAandDHCP6S", json_object_new_boolean(false));
@@ -842,7 +850,7 @@
 	prefixWanName = json_object_get_string(json_object_object_get(Jobj, "IPv6_PrefixWan"));
 	iP6PrefixDelegateWAN = json_object_get_string(json_object_object_get(curIpIfaceObj, "X_ZYXEL_IPv6PrefixDelegateWAN"));
 	if(json_object_object_get(Jobj, "IPv6_PrefixWan")){	
-    if(strcmp(prefixWanName, "Default")){
+    if(prefixWanName || (prefixWanName && strcmp(prefixWanName, "Default"))){
         for(i = 0; i < json_object_array_length(allIpIfaceObj); i++) {
 			struct json_object *subIpIfaceObj = json_object_array_get_idx(allIpIfaceObj, i);
 			srvName = json_object_get_string(json_object_object_get(subIpIfaceObj, "X_ZYXEL_SrvName"));
@@ -882,7 +890,7 @@
 	if(json_object_object_get(Jobj, "IPv6_PrefixType"))
 	json_object_object_add(curIpIfaceObj, "X_ZYXEL_IPv6Origin", json_object_new_string(ip6Origin));
 	if(json_object_object_get(Jobj, "IPv6_PrefixType")){
-	if(!strcmp(ip6Origin, "DelegateFromWan")){
+	if(ip6Origin && !strcmp(ip6Origin, "DelegateFromWan")){
 		IPv6_PrefixWan = json_object_get_string(json_object_object_get(Jobj, "IPv6_PrefixWan"));
 		json_object_object_add(curIpIfaceObj, "X_ZYXEL_IPv6PrefixDelegateWAN", json_object_new_string(IPv6_PrefixWan));
 	}else{
@@ -894,7 +902,7 @@
 
 	IPv6_IdentifierType = json_object_get_string(json_object_object_get(Jobj, "IPv6_IdentifierType"));
 	if(json_object_object_get(Jobj, "IPv6_IdentifierType")){
-	if(!strcmp(IPv6_IdentifierType, "EUI64"))
+	if(IPv6_IdentifierType && !strcmp(IPv6_IdentifierType, "EUI64"))
 		json_object_object_add(curIpIfaceObj, "X_ZYXEL_IPv6IdentifierType", json_object_new_string("EUI-64"));
 	else{ //if(!strcmp(IPv6_IdentifierType, "Manual"))
 		ip6Id = json_object_get_string(json_object_object_get(Jobj, "IPv6_Identifier"));
@@ -906,16 +914,16 @@
 	ip6LanAdrAssign = json_object_get_string(json_object_object_get(Jobj, "IPv6_LanAddrAssign"));
 	ip6DNSAssign = json_object_get_string(json_object_object_get(Jobj, "IPv6_DNSAssign"));
 	if(json_object_object_get(Jobj, "IPv6_LanAddrAssign")){
-	if(!strcmp(ip6LanAdrAssign, "Stateless"))
+	if(ip6LanAdrAssign && !strcmp(ip6LanAdrAssign, "Stateless"))
 		json_object_object_add(curIpIfaceObj, "X_ZYXEL_AdvManagedFlag", json_object_new_int(0));
 	else //if(!strcmp(ip6LanAdrAssign, "Stateful")){
 		json_object_object_add(curIpIfaceObj, "X_ZYXEL_AdvManagedFlag", json_object_new_int(1));
 	}
 
 	if(json_object_object_get(Jobj, "IPv6_DNSAssign")){
-	if(!strcmp(ip6DNSAssign, "DHCP"))
+	if(ip6DNSAssign && !strcmp(ip6DNSAssign, "DHCP"))
 		json_object_object_add(curIpIfaceObj, "X_ZYXEL_AdvOtherConfigFlag", json_object_new_int(1));
-	else if(!strcmp(ip6DNSAssign, "RA_DHCP"))
+	else if(ip6DNSAssign && !strcmp(ip6DNSAssign, "RA_DHCP"))
 		json_object_object_add(curIpIfaceObj, "X_ZYXEL_AdvOtherConfigFlag", json_object_new_int(1));
 	else //if(!strcmp(ip6DNSAssign, "RA"))
 		json_object_object_add(curIpIfaceObj, "X_ZYXEL_AdvOtherConfigFlag", json_object_new_int(0));
@@ -971,8 +979,9 @@
 			memcpy(&v6AddrIid, &curIpIfaceIid, sizeof(objIndex_t));
 			v6AddrIid.level = 1;
 			ret = zcfgFeObjJsonAdd(RDM_OID_IP_IFACE_V6_ADDR, &v6AddrIid, NULL);
+			ret = (ret == ZCFG_SUCCESS) ? zcfgFeObjJsonGet(RDM_OID_IP_IFACE_V6_ADDR, &v6AddrIid, &v6AddrObj) : ret;
 			if(ret == ZCFG_SUCCESS){
-				zcfgFeObjJsonGet(RDM_OID_IP_IFACE_V6_ADDR, &v6AddrIid, &v6AddrObj);
+				//zcfgFeObjJsonGet(RDM_OID_IP_IFACE_V6_ADDR, &v6AddrIid, &v6AddrObj);
 				json_object_object_add(v6AddrObj, "Enable", json_object_new_boolean(true));
 				json_object_object_add(v6AddrObj, "IPAddress", json_object_new_string(ip6LinkLocalAdr));
 				zcfgFeObjJsonSet(RDM_OID_IP_IFACE_V6_ADDR, &v6AddrIid, v6AddrObj, NULL);
@@ -994,12 +1003,13 @@
 	const char *ip6LanAdrAssign = NULL;
 	const char *ipv6Origin = NULL;
 	IID_INIT(v6prefixIid);
-	while(zcfgFeSubInObjJsonGetNext(RDM_OID_IP_IFACE_V6_PREFIX, &curIpIfaceIid, &v6prefixIid, &v6prefixObj)== ZCFG_SUCCESS){
+	while(zcfgFeSubInObjJsonGetNext(RDM_OID_IP_IFACE_V6_PREFIX, &curIpIfaceIid, &v6prefixIid, &v6prefixObj)== ZCFG_SUCCESS)
+	{
 		ip6Prefix = json_object_get_string(json_object_object_get(v6prefixObj, "Prefix"));
 		ipfacev6Prefix = json_object_get_string(json_object_object_get(curIpIfaceObj, "X_ZYXEL_IPv6Prefix"));
 		ipv6Origin = json_object_get_string(json_object_object_get(v6prefixObj, "Origin"));
-		if(!strcmp(ip6Prefix, ipfacev6Prefix)){
-			if(!strcmp(ipv6Origin, "Static")){
+		if(ip6Prefix && ipfacev6Prefix && !strcmp(ip6Prefix, ipfacev6Prefix)){
+			if(ipv6Origin && !strcmp(ipv6Origin, "Static")){
 				found = true;
 				break;
 			}
@@ -1028,7 +1038,7 @@
 		if(json_object_object_get(Jobj, "IPv6_LanAddrAssign")){
 			ip6LanAdrAssign = json_object_get_string(json_object_object_get(Jobj, "IPv6_LanAddrAssign"));
 		
-			if(!strcmp(ip6LanAdrAssign, "Stateless"))
+			if(ip6LanAdrAssign && !strcmp(ip6LanAdrAssign, "Stateless"))
 				json_object_object_add(v6prefixObj, "Autonomous", json_object_new_boolean(true));
 			else //if(!strcmp(ip6LanAdrAssign, "Stateful"))
 				json_object_object_add(v6prefixObj, "Autonomous", json_object_new_boolean(false));
@@ -1077,10 +1087,10 @@
 	if(found){
 		json_object_object_add(dhcp6SrvObj, "Enable", json_object_new_boolean(true));
 		json_object_object_add(dhcp6SrvObj, "Interface", json_object_new_string(ifacePath));
-	
+
 		ip6LanAddrAssign = json_object_get_string(json_object_object_get(Jobj, "IPv6_LanAddrAssign"));
 		if(json_object_object_get(Jobj, "IPv6_LanAddrAssign")){
-		if(!strcmp(ip6LanAddrAssign, "Stateless")){
+		if(ip6LanAddrAssign && !strcmp(ip6LanAddrAssign, "Stateless")){
 			json_object_object_add(dhcp6SrvObj, "X_ZYXEL_MinAddress", json_object_new_string(""));
 			json_object_object_add(dhcp6SrvObj, "X_ZYXEL_MaxAddress", json_object_new_string(""));
 		}
@@ -1232,15 +1242,15 @@
 	json_object_object_add(curIpIfaceObj, "X_ZYXEL_SrvName", json_object_new_string(selbrName));
 	ret = setLanIP(Jobj);
 	if(ret != ZCFG_SUCCESS)
-		return ret;
+		goto out;
 
 	ret = setDHCPState(Jobj);
 	if(ret != ZCFG_SUCCESS)
-		return ret;
+		goto out;
 
 	ret = setIgmpSnooping(Jobj);
 	if(ret != ZCFG_SUCCESS)
-		return ret;
+		goto out;
 
 
 	if(json_object_object_get(Jobj, "IPv6_LanEnable"))
@@ -1272,6 +1282,8 @@
 		json_object_object_add(curIpIfaceObj, "IPv6Enable", json_object_new_boolean(false));
 		zcfgFeObjJsonBlockedSet(RDM_OID_IP_IFACE, &curIpIfaceIid, curIpIfaceObj, NULL);
 	}		
+
+out:
 	freeAllLanObjs();
 	return ret;
 }
@@ -1308,13 +1320,14 @@
 	int leasetime = 0, min = 0, hour = 0, day = 0, DNSQueryScenario = 0;
 	const char *dnstype = NULL, *dnsserver = NULL, *IPv6_IdentifierType = NULL, *IPv6_PrefixType = NULL, *v6DNSServer = NULL, *v6DNSList = NULL, *Name = NULL, *curName = NULL;
 	const char *igmpSnooping = NULL, *sub_igmpSnooping = NULL, *mldSnooping = NULL, *sub_mldSnooping = NULL,*ifName = NULL;
-	char currintf[32] = {0}, buff[32] = {0}, v6DNSServerTmp[256] = {0}, v6DNSListTmp[256] = {0}, brName[8]={0}, igmpType[8] = {0}, mldType[8] = {0};
+	char currintf[32] = {0}, buff[32] = {0}, v6DNSServerTmp[256] = {0}, v6DNSListTmp[256] = {0}, brName[100]={0}, igmpType[100] = {0}, mldType[8] = {0};
 	char *dns1 = NULL, *dns2 = NULL, *v6dnstype1 = NULL, *v6dnstype2 = NULL, *v6dnstype3 = NULL, *v6dnsServer1 = NULL, *v6dnsServer2 = NULL, *v6dnsServer3 = NULL, *v6DNSservertmp = NULL, *v6dnstypetmp = NULL, *ptr = NULL, *brPtr = NULL;
 	const char *ip6Origin = NULL, *v6IPAddress = NULL, *LowerLayers = NULL;
 
 	while(zcfgFeObjJsonGetNext(RDM_OID_IP_IFACE, &ipifaceIid, &ipifaceObj) == ZCFG_SUCCESS){
-		if(showdetail)
+		if(showdetail){
 			break;
+		}
 		if(!strcmp("", Jgets(ipifaceObj,"X_ZYXEL_SrvName")))
 			Jadds(ipifaceObj, "X_ZYXEL_SrvName", "Default");
 	
@@ -1428,8 +1441,9 @@
 							else 
 								json_object_object_add(paramJobj, "IGMPSnoopingMode", json_object_new_string("Blocking"));
 							break;
+
 						}
-						sub_igmpSnooping = strtok_r(brPtr, ",", &brPtr);
+						sub_igmpSnooping = strtok_r(NULL, ",", &brPtr);
 					}
 				}
 				zcfgFeJsonObjFree(igmpSnoopingObj);
@@ -1485,7 +1499,8 @@
 									json_object_object_add(paramJobj, "MLDSnoopingMode", json_object_new_string("Blocking"));
 								break;
 							}
-							sub_mldSnooping = strtok_r(brPtr, ",", &brPtr);
+							sub_mldSnooping = strtok_r(NULL, ",", &brPtr);
+
 						}
 					}
 					zcfgFeJsonObjFree(mldSnoopingObj);
@@ -1590,6 +1605,8 @@
 		}
 		zcfgFeJsonObjFree(ipifaceObj);
 	}
+
+	zcfgFeJsonObjFree(ipifaceObj);
 	return ret;
 
 }
Index: libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_addnl_subnet.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/homeNetworking/zcfg_fe_dal_addnl_subnet.c	2020-02-27 14:51:18.000000000 +0800
+++ libzcfg_fe_dal-1.0/network/homeNetworking/zcfg_fe_dal_addnl_subnet.c	2020-02-27 14:51:27.866627162 +0800
@@ -428,12 +428,16 @@
 					json_object_object_add(paramJobj, "PubLan_SubnetMask", JSON_OBJ_COPY(json_object_object_get(ipIfaceObj, "X_ZYXEL_PubLan_Mask")));
 					json_object_object_add(paramJobj, "PubLan_DHCP", JSON_OBJ_COPY(json_object_object_get(ipIfaceObj, "X_ZYXEL_PubLan_DHCP")));
 					json_object_object_add(paramJobj, "PubLan_ARP", JSON_OBJ_COPY(json_object_object_get(ipIfaceObj, "X_ZYXEL_PubLan_ARP")));
+					zcfgFeJsonObjFree(ipIfaceObj);
 				}
 			}				
 		}
 		json_object_array_add(Jarray, paramJobj);
 		zcfgFeJsonObjFree(bringObj);
 	}
+
+	zcfgFeJsonObjFree(WanLanList);
+
 	return ret;
 }
 
Index: libzcfg_fe_dal-1.0/js/zcfg_fe_dal_networkmap.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/js/zcfg_fe_dal_networkmap.c	2020-02-27 14:51:18.000000000 +0800
+++ libzcfg_fe_dal-1.0/js/zcfg_fe_dal_networkmap.c	2020-02-27 14:51:27.866627162 +0800
@@ -1400,8 +1400,8 @@
 zcfgRet_t zcfgFeDalLanHostsGet(struct json_object *Jobj, struct json_object *Jarray, char *replyMsg){
 	zcfgRet_t ret = ZCFG_SUCCESS;
 	struct json_object *obj = NULL;
-	struct json_object *iconJobj, *iconJarray;
-	struct json_object *ssidJobj, *ssidJarray;
+	struct json_object *ssidJobj, *ssidJarray = NULL;
+	struct json_object *iconJobj, *iconJarray = ssidJarray;
 	struct json_object *dhcp4PoolJobj, *dhcp4PoolJarray, *dhcp4PoolIid;
 	struct json_object *dhcp4StaticAddrJobj, *dhcp4StaticAddrJarray, *dhcp4StaticAddrIid;
 	struct json_object *radioJobj, *radioJarray;
