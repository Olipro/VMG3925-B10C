Index: libzcfg_fe_dal-1.0/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c
===================================================================
--- libzcfg_fe_dal-1.0.orig/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2020-02-26 16:51:49.884153849 +0800
+++ libzcfg_fe_dal-1.0/network/interfaceGrouping/zcfg_fe_dal_intfGrp.c	2020-02-26 16:54:52.815196058 +0800
@@ -882,6 +882,7 @@
 	char *single_lanIntf = NULL, *rest_str = NULL, *op125value = NULL;
 	const char *act = NULL, *wildcardenable = NULL, *origVlanName = NULL, *ptr = NULL, *tmp = NULL, *brRefKey = NULL, *cmd = NULL;
 	bool lanIntfSet = false, wildcard = false, lanIntReset = false;
+	bool criteriaCnt = 0;
 
     printf("Entering dalcmdIntrGrpEdit!\n");
 	if(json_object_object_get(Jobj, "critInfo"))
@@ -945,109 +946,6 @@
 		}
 	}
 
-    //if only port bind setting, no criteria option.
-	if(json_object_object_get(Jobj, "lanIntf") != NULL && criteriaNum <= 0)
-    {
-			strcpy(lanIntf_tmp, lanintf);
-			single_lanIntf = strtok_r(lanIntf_tmp, ",", &rest_str);
-			IID_INIT(BridgeFilterIid);
-			IID_INIT(VlanIid);
-			while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VLAN_GROUP, &VlanIid, &VlanObj) == ZCFG_SUCCESS)
-            {
-				if(atoi(json_object_get_string(json_object_object_get(VlanObj, "BrRefKey"))) == index)
-                {
-					json_object_object_add(VlanObj, "BrRefKey", json_object_new_string(""));
-					zcfgFeObjJsonSet(RDM_OID_VLAN_GROUP, &VlanIid, VlanObj, NULL);
-					zcfgFeJsonObjFree(VlanObj);
-					break;
-				}
-				zcfgFeJsonObjFree(VlanObj);
-			}
-			while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, &BridgeFilterObj) == ZCFG_SUCCESS)
-            {
-                //Check LAN port if not binding, let it to back bind br0.
-				if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Bridge")),brPath))
-                {
-				strcpy(buf, lanintf);
-				ptr = strtok_r(buf, ",", &tmp);
-                    while(ptr != NULL)
-                    {
-                        if(!strncmp(ptr,brPath,17))
-                        {
-                            if(!strcmp(ptr,json_object_get_string(json_object_object_get(BridgeFilterObj, "Interface"))))
-                            {
-                                //filter already bind lan port.
-                                printf("dalcmdIntrGrpEdit:idx:%d, already have interface: %s, lanIntfSet:%s, bridge:%s \n",BridgeFilterIid.idx[0], ptr, lanIntfSet ? "true": "false", json_object_get_string(json_object_object_get(BridgeFilterObj, "Bridge")));
-                                printf("dalcmdIntrGrpEdit:idx:%d, X_ZYXEL_PreIfaceGroup:%s\n",BridgeFilterIid.idx[0],json_object_get_string(json_object_object_get(BridgeFilterObj, "X_ZYXEL_PreIfaceGroup")));
-							lanIntfSet = true;
-                                printf("dalcmdIntrGrpEdit: idx %d only port bind without crit!\n",BridgeFilterIid.idx[0]);
-							break;
-						}
-					}
-					ptr = strtok_r(NULL, ",", &tmp);
-				}
-				buf[0] = '\0';
-                    /* 
-                     * if lanIntf already set, then do nothing, continue parse next idx.
-                     * if lanIntf not set, and interface was empty, delete it, if not empty, set to bind br0.
-                    */
-                    if(!lanIntfSet)
-                    {
-                        printf("dalcmdIntrGrpEdit: idx:%d, lanIntf not match data model, ptr:%s, X_ZYXEL_Enable_Criteria:%s\n Bridge:%s\n",
-                                BridgeFilterIid.idx[0], ptr, json_object_get_string(json_object_object_get(BridgeFilterObj, "X_ZYXEL_Enable_Criteria")),json_object_get_string(json_object_object_get(BridgeFilterObj, "Bridge")));
-                        //if already bind, and no change port, it should pass it.
-					json_object_object_add(BridgeFilterObj, "Bridge", json_object_new_string("Bridging.Bridge.1"));
-					if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Interface")),""))
-                        {
-						zcfgFeObjJsonDel(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, NULL);
-                        }
-					else
-                        {
-                            printf("dalcmdIntrGrpEdit: idx:%d, set bridge filter, ptr:%s, X_ZYXEL_Enable_Criteria:%s\n Bridge:%s\n",
-                                BridgeFilterIid.idx[0], ptr, json_object_get_string(json_object_object_get(BridgeFilterObj, "X_ZYXEL_Enable_Criteria")),json_object_get_string(json_object_object_get(BridgeFilterObj, "Bridge")));
-						zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
-				}
-                    }
-				lanIntfSet = false;
-					zcfgFeJsonObjFree(BridgeFilterObj);
-				}
-			}
-			while(single_lanIntf != NULL)
-            {
-				IID_INIT(BridgeFilterIid);
-				while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, &BridgeFilterObj) == ZCFG_SUCCESS)
-                {
-                    strncpy(preIfaceGroup, json_object_get_string(json_object_object_get(BridgeFilterObj, "X_ZYXEL_PreIfaceGroup")), sizeof(preIfaceGroup));
-					if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Interface")),single_lanIntf) && !strcmp(preIfaceGroup,""))
-                    {
-                        printf("dalcmdIntrGrpEdit: idx:%d, signel lanIntf, X_ZYXEL_Enable_Criteria:%s\n Bridge:%s, brPath:%s\n",
-                                BridgeFilterIid.idx[0], json_object_get_string(json_object_object_get(BridgeFilterObj, "X_ZYXEL_Enable_Criteria")),json_object_get_string(json_object_object_get(BridgeFilterObj, "Bridge")), brPath);
-						json_object_object_add(BridgeFilterObj, "Bridge", json_object_new_string(brPath));
-						zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
-						zcfgFeJsonObjFree(BridgeFilterObj);
-						break;
-					}
-                    else if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Interface")),single_lanIntf) && strcmp(preIfaceGroup,"") != 0)
-                    {
-                        printf("dalcmdIntrGrpEdit: idx %d signel lanIntf, and have been bind by crit!\n",BridgeFilterIid.idx[0]);
-                        sprintf(preInterface,"Bridging.Bridge.1.Port.%d",(BridgeFilterIid.idx[0]+1));
-                        json_object_object_add(BridgeFilterObj, "Bridge", json_object_new_string("Bridging.Bridge.1"));
-                        json_object_object_add(BridgeFilterObj, "X_ZYXEL_PreIfaceGroup", json_object_new_string(""));
-                        zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
-                        
-                        printf("dalcmdIntrGrpEdit: idx %d signel lanIntf, modify to port bind only!\n",BridgeFilterIid.idx[0]);
-                        json_object_object_add(BridgeFilterObj, "Bridge", json_object_new_string(brPath));
-                        json_object_object_add(BridgeFilterObj, "Interface", json_object_new_string(preInterface));
-                        zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
-                        zcfgFeJsonObjFree(BridgeFilterObj);
-                        break;
-                    }
-					zcfgFeJsonObjFree(BridgeFilterObj);
-				}
-				single_lanIntf = strtok_r(rest_str, ",", &rest_str);
-			}
-		}
-
     if(criteriaNum > 0)
     {
 		sprintf(cnt,"%d",count);
@@ -1073,6 +971,7 @@
 				}
 				if(!strcmp(act,"add"))
                 {
+					++criteriaCnt;
 					IID_INIT(VlanIid);
 					while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VLAN_GROUP, &VlanIid, &VlanObj) == ZCFG_SUCCESS)
                     {
@@ -1106,6 +1005,7 @@
 				}
                 else if(!strcmp(act,"edit"))
                 {
+					++criteriaCnt;
                     VlanIid.idx[0] = idx;
                     VlanIid.level = 1;
                     if(zcfgFeObjJsonGetWithoutUpdate(RDM_OID_VLAN_GROUP, &VlanIid, &VlanObj) == ZCFG_SUCCESS)
@@ -1145,6 +1045,7 @@
                      * If only change port bind to option bind, lanIntf will be null,
                      * also same as only set option bind.
                     */
+					++criteriaCnt;
                     if((ret = zcfgFeDalIntrGrpDelete(Jobj, NULL)) == ZCFG_SUCCESS)
                     {
                         if((ret = dalcmdIntrGrpAdd(Jobj, replyMsg)) == ZCFG_SUCCESS)
@@ -1297,6 +1198,110 @@
 			obj = json_object_object_get(Jobj, cnt);
 		}//while(obj != NULL)
 	}
+
+    //if only port bind setting, no criteria option.
+	if(json_object_object_get(Jobj, "lanIntf") != NULL && criteriaCnt == 0)
+    {
+		strcpy(lanIntf_tmp, lanintf);
+		single_lanIntf = strtok_r(lanIntf_tmp, ",", &rest_str);
+		IID_INIT(BridgeFilterIid);
+		IID_INIT(VlanIid);
+		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_VLAN_GROUP, &VlanIid, &VlanObj) == ZCFG_SUCCESS)
+		{
+			if(atoi(json_object_get_string(json_object_object_get(VlanObj, "BrRefKey"))) == index)
+			{
+				json_object_object_add(VlanObj, "BrRefKey", json_object_new_string(""));
+				zcfgFeObjJsonSet(RDM_OID_VLAN_GROUP, &VlanIid, VlanObj, NULL);
+				zcfgFeJsonObjFree(VlanObj);
+				break;
+			}
+			zcfgFeJsonObjFree(VlanObj);
+		}
+		while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, &BridgeFilterObj) == ZCFG_SUCCESS)
+		{
+			//Check LAN port if not binding, let it to back bind br0.
+			if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Bridge")),brPath))
+			{
+				strcpy(buf, lanintf);
+				ptr = strtok_r(buf, ",", &tmp);
+				while(ptr != NULL)
+				{
+					if(!strncmp(ptr,brPath,17))
+					{
+						if(!strcmp(ptr,json_object_get_string(json_object_object_get(BridgeFilterObj, "Interface"))))
+						{
+							//filter already bind lan port.
+							printf("dalcmdIntrGrpEdit:idx:%d, already have interface: %s, lanIntfSet:%s, bridge:%s \n",BridgeFilterIid.idx[0], ptr, lanIntfSet ? "true": "false", json_object_get_string(json_object_object_get(BridgeFilterObj, "Bridge")));
+							printf("dalcmdIntrGrpEdit:idx:%d, X_ZYXEL_PreIfaceGroup:%s\n",BridgeFilterIid.idx[0],json_object_get_string(json_object_object_get(BridgeFilterObj, "X_ZYXEL_PreIfaceGroup")));
+							lanIntfSet = true;
+							printf("dalcmdIntrGrpEdit: idx %d only port bind without crit!\n",BridgeFilterIid.idx[0]);
+							break;
+						}
+					}
+					ptr = strtok_r(NULL, ",", &tmp);
+				}
+				buf[0] = '\0';
+				/* 
+				* if lanIntf already set, then do nothing, continue parse next idx.
+				* if lanIntf not set, and interface was empty, delete it, if not empty, set to bind br0.
+				*/
+				if(!lanIntfSet)
+				{
+					printf("dalcmdIntrGrpEdit: idx:%d, lanIntf not match data model, ptr:%s, X_ZYXEL_Enable_Criteria:%s\n Bridge:%s\n",
+					BridgeFilterIid.idx[0], ptr, json_object_get_string(json_object_object_get(BridgeFilterObj, "X_ZYXEL_Enable_Criteria")),json_object_get_string(json_object_object_get(BridgeFilterObj, "Bridge")));
+					//if already bind, and no change port, it should pass it.
+					json_object_object_add(BridgeFilterObj, "Bridge", json_object_new_string("Bridging.Bridge.1"));
+					if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Interface")),""))
+					{
+						zcfgFeObjJsonDel(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, NULL);
+					}
+					else
+					{
+						printf("dalcmdIntrGrpEdit: idx:%d, set bridge filter, ptr:%s, X_ZYXEL_Enable_Criteria:%s\n Bridge:%s\n",
+						BridgeFilterIid.idx[0], ptr, json_object_get_string(json_object_object_get(BridgeFilterObj, "X_ZYXEL_Enable_Criteria")),json_object_get_string(json_object_object_get(BridgeFilterObj, "Bridge")));
+						zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
+					}
+				}
+				lanIntfSet = false;
+				zcfgFeJsonObjFree(BridgeFilterObj);
+			}
+		}
+		while(single_lanIntf != NULL)
+		{
+			IID_INIT(BridgeFilterIid);
+			while(zcfgFeObjJsonGetNextWithoutUpdate(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, &BridgeFilterObj) == ZCFG_SUCCESS)
+			{
+				strncpy(preIfaceGroup, json_object_get_string(json_object_object_get(BridgeFilterObj, "X_ZYXEL_PreIfaceGroup")), sizeof(preIfaceGroup));
+				if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Interface")),single_lanIntf) && !strcmp(preIfaceGroup,""))
+				{
+					printf("dalcmdIntrGrpEdit: idx:%d, signel lanIntf, X_ZYXEL_Enable_Criteria:%s\n Bridge:%s, brPath:%s\n",
+					BridgeFilterIid.idx[0], json_object_get_string(json_object_object_get(BridgeFilterObj, "X_ZYXEL_Enable_Criteria")),json_object_get_string(json_object_object_get(BridgeFilterObj, "Bridge")), brPath);
+					json_object_object_add(BridgeFilterObj, "Bridge", json_object_new_string(brPath));
+					zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
+					zcfgFeJsonObjFree(BridgeFilterObj);
+					break;
+				}
+				else if(!strcmp(json_object_get_string(json_object_object_get(BridgeFilterObj, "Interface")),single_lanIntf) && strcmp(preIfaceGroup,"") != 0)
+				{
+					printf("dalcmdIntrGrpEdit: idx %d signel lanIntf, and have been bind by crit!\n",BridgeFilterIid.idx[0]);
+					sprintf(preInterface,"Bridging.Bridge.1.Port.%d",(BridgeFilterIid.idx[0]+1));
+					json_object_object_add(BridgeFilterObj, "Bridge", json_object_new_string("Bridging.Bridge.1"));
+					json_object_object_add(BridgeFilterObj, "X_ZYXEL_PreIfaceGroup", json_object_new_string(""));
+					zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
+                        
+					printf("dalcmdIntrGrpEdit: idx %d signel lanIntf, modify to port bind only!\n",BridgeFilterIid.idx[0]);
+					json_object_object_add(BridgeFilterObj, "Bridge", json_object_new_string(brPath));
+					json_object_object_add(BridgeFilterObj, "Interface", json_object_new_string(preInterface));
+					zcfgFeObjJsonBlockedSet(RDM_OID_BRIDGING_FILTER, &BridgeFilterIid, BridgeFilterObj, NULL);
+					zcfgFeJsonObjFree(BridgeFilterObj);
+					break;
+				}
+				zcfgFeJsonObjFree(BridgeFilterObj);
+			}
+			single_lanIntf = strtok_r(rest_str, ",", &rest_str);
+		}
+	}
+
 	return ret;
 }
 
