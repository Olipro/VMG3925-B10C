Index: iptables-1.4.21/extensions/libxt_blog.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ iptables-1.4.21/extensions/libxt_blog.c	2020-03-06 18:26:54.670723800 +0800
@@ -0,0 +1,85 @@
+/* Shared library add-on to iptables to add blog match support. */
+#include <stdbool.h>
+#include <stdio.h>
+#include <netdb.h>
+#include <string.h>
+#include <stdlib.h>
+#include <getopt.h>
+#include <netinet/in.h>
+#include <xtables.h>
+#include <linux/netfilter/xt_blog.h>
+
+static void blog_match_help(void)
+{
+	printf(
+"blog match options:\n"
+"[!] --tcp-pureack              match when blog TCP Pure ACK is\n"
+"                               detected.\n");
+}
+
+static const struct option blog_match_opts[] = {
+	{.name = "tcp-pureack",      .has_arg = false, .val = '1'},
+	XT_GETOPT_TABLEEND,
+};
+
+static int
+blog_match_parse(int c, char **argv, int invert, unsigned int *flags,
+          const void *entry, struct xt_entry_match **match)
+{
+	struct xt_blog *bloginfo = (struct xt_blog *)(*match)->data;
+
+	switch (c) {
+	case '1':
+		bloginfo->tcp_pure_ack = 1;
+		bloginfo->invert = invert;
+		break;
+	}
+
+	return 1;
+}
+
+static void
+blog_match_print(const void *ip, const struct xt_entry_match *match, int numeric)
+{
+	const struct xt_blog *bloginfo = (struct xt_blog *)match->data;
+
+	printf(" blog");
+	if (bloginfo->tcp_pure_ack)
+		printf(" TCP Pure ACK");
+	if (bloginfo->invert)
+		printf(" not detected");
+	else
+		printf(" detected");
+}
+
+static void
+blog_match_save(const void *ip, const struct xt_entry_match *match)
+{
+	const struct xt_blog *bloginfo = (struct xt_blog *)match->data;
+
+	printf(" blog");
+	if (bloginfo->tcp_pure_ack) {
+		if (bloginfo->invert)
+			printf(" !");
+		printf(" --tcp-pureack ");
+	}
+}
+
+static struct xtables_match blog_match = {
+	.family		= NFPROTO_UNSPEC,
+	.name		= "blog",
+	.version	= XTABLES_VERSION,
+	.size		= XT_ALIGN(sizeof(struct xt_blog)),
+	.userspacesize	= XT_ALIGN(sizeof(struct xt_blog)),
+	.help		= blog_match_help,
+	.parse		= blog_match_parse,
+	.print		= blog_match_print,
+	.save		= blog_match_save,
+	.extra_opts	= blog_match_opts,
+};
+
+void
+_init(void)
+{
+	xtables_register_match(&blog_match);
+}
Index: iptables-1.4.21/extensions/libxt_tcp.c
===================================================================
--- iptables-1.4.21.orig/extensions/libxt_tcp.c	2013-11-22 19:18:13.000000000 +0800
+++ iptables-1.4.21/extensions/libxt_tcp.c	2020-03-09 13:47:28.563372700 +0800
@@ -23,7 +23,9 @@
 "[!] --destination-port port[:port]\n"
 " --dport ...\n"
 "				match destination port(s)\n"
-"[!] --tcp-option number        match if TCP option set\n");
+"[!] --tcp-option number        match if TCP option set\n"
+"[!] --tcp-pureack              match when only ACK flag set and\n"
+"                               payload length is zero\n");
 }
 
 static const struct option tcp_opts[] = {
@@ -34,6 +36,7 @@
 	{.name = "syn",              .has_arg = false, .val = '3'},
 	{.name = "tcp-flags",        .has_arg = true,  .val = '4'},
 	{.name = "tcp-option",       .has_arg = true,  .val = '5'},
+	{.name = "tcp-pureack",      .has_arg = false, .val = '6'},
 	XT_GETOPT_TABLEEND,
 };
 
@@ -168,7 +171,7 @@
 		if (*flags & TCP_FLAGS)
 			xtables_error(PARAMETER_PROBLEM,
 				   "Only one of `--syn' or `--tcp-flags' "
-				   " allowed");
+				   " or --tcp-pureack allowed");
 		parse_tcp_flags(tcpinfo, "SYN,RST,ACK,FIN", "SYN", invert);
 		*flags |= TCP_FLAGS;
 		break;
@@ -177,7 +180,7 @@
 		if (*flags & TCP_FLAGS)
 			xtables_error(PARAMETER_PROBLEM,
 				   "Only one of `--syn' or `--tcp-flags' "
-				   " allowed");
+				   " or --tcp-pureack allowed");
 		if (!argv[optind]
 		    || argv[optind][0] == '-' || argv[optind][0] == '!')
 			xtables_error(PARAMETER_PROBLEM,
@@ -198,6 +201,16 @@
 			tcpinfo->invflags |= XT_TCP_INV_OPTION;
 		*flags |= TCP_OPTION;
 		break;
+
+	case '6':
+		if (*flags & TCP_FLAGS)
+			xtables_error(PARAMETER_PROBLEM,
+				   "Only one of `--syn' or `--tcp-flags' "
+				   " or --tcp-pureack allowed");
+		parse_tcp_flags(tcpinfo, "SYN,RST,ACK,FIN", "ACK", invert);
+		tcpinfo->pure_ack = 1;
+		*flags |= TCP_FLAGS;
+		break;
 	}
 
 	return 1;
@@ -307,6 +320,8 @@
 	print_flags(tcp->flg_mask, tcp->flg_cmp,
 		    tcp->invflags & XT_TCP_INV_FLAGS,
 		    numeric);
+    if (tcp->pure_ack)
+		printf(" pure ACK");
 	if (tcp->invflags & ~XT_TCP_INV_MASK)
 		printf(" Unknown invflags: 0x%X",
 		       tcp->invflags & ~XT_TCP_INV_MASK);
@@ -360,6 +375,12 @@
 		printf(" ");
 		print_tcpf(tcpinfo->flg_cmp);
 	}
+
+	if (tcpinfo->pure_ack) {
+		if (tcpinfo->invflags & XT_TCP_INV_FLAGS)
+			printf(" !");
+		printf(" --tcp-pureack ");
+	}
 }
 
 static struct xtables_match tcp_match = {
Index: iptables-1.4.21/include/linux/netfilter/xt_blog.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ iptables-1.4.21/include/linux/netfilter/xt_blog.h	2020-03-06 18:26:54.670723800 +0800
@@ -0,0 +1,11 @@
+#ifndef _XT_BLOG_H
+#define _XT_BLOG_H
+
+#include <linux/types.h>
+
+struct xt_blog {
+    __u8 tcp_pure_ack;
+    __u8 invert;
+};
+
+#endif /*_XT_BLOG_H*/
Index: iptables-1.4.21/include/linux/netfilter/xt_tcpudp.h
===================================================================
--- iptables-1.4.21.orig/include/linux/netfilter/xt_tcpudp.h	2013-11-22 19:18:13.000000000 +0800
+++ iptables-1.4.21/include/linux/netfilter/xt_tcpudp.h	2020-03-09 13:47:35.113872700 +0800
@@ -11,6 +11,7 @@
 	__u8 flg_mask;			/* TCP flags mask byte */
 	__u8 flg_cmp;			/* TCP flags compare byte */
 	__u8 invflags;			/* Inverse flags */
+	__u8 pure_ack;			/* Pure ACK packet */
 };
 
 /* Values for "inv" field in struct ipt_tcp. */
